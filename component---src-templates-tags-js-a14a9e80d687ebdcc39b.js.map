{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./src/components/slugify.js","webpack:///./src/components/Blog/BlogCard.js","webpack:///./src/components/Blog/Tags.js","webpack:///./src/hooks/useRandomBlogPost.js","webpack:///./src/components/Blog/BlogLayout.js"],"names":["TagsPage","data","tag","pageContext","allMarkdownRemark","edges","totalCount","tagHeader","title","map","node","slug","fields","frontmatter","date","tags","key","id","readtime","timeToRead","excerpt","pageQuery","module","exports","str","match","x","toLowerCase","join","PostWrapper","styled","article","p","theme","dark","accentColor","primaryColor","shadowSmall","secondaryColor","BlogDateAndReadTime","style","fontSize","color","aria-label","icon","BlogCard","to","marginTop","slugify","TagBreadcrumb","Link","Tags","overflow","group","fieldValue","randomGenerator","min","max","Math","floor","random","useRandomBlogPost","blogposts","randomPost","window","location","pathname","randomSlug","randomTitle","BlogLayout","children","sharerSection","SplitLayout","content","aside"],"mappings":"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","file":"component---src-templates-tags-js-a14a9e80d687ebdcc39b.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\";\n\n\nimport SEO from \"#components/seo\";\nimport Layout from \"#components/Layout/Layout\"\nimport BlogCard from \"#components/Blog/BlogCard\";\nimport BlogLayout from \"#components/Blog/BlogLayout\";\n\nconst TagsPage = ({ data, pageContext }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n\n  const tagHeader = `${totalCount} post${totalCount === 1 ? \"\" : \"s\"} tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <SEO title={tagHeader + ' | Anurag Hazra'} />\n\n      <BlogLayout>\n        <h1>{tagHeader}</h1>\n        <br />\n        <br />\n        {\n          edges.map(({ node }) => {\n            const { slug } = node.fields;\n            const { title, date, tags } = node.frontmatter;\n            return (\n              <BlogCard\n                tags={tags}\n                key={node.id}\n                slug={slug}\n                title={title}\n                date={date}\n                readtime={node.timeToRead}\n                excerpt={node.excerpt}\n              />\n            )\n          })\n        }\n      </BlogLayout>\n    </Layout>\n  )\n}\nexport default TagsPage;\n\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            tags\n            title\n            date(formatString: \"MMMM DD, YYYY\", locale: \"en\")\n          }\n        }\n      }\n    }\n  }\n`","const slugify = str =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map(x => x.toLowerCase())\n    .join('-');\n\nmodule.exports = slugify\n","import React from \"react\";\nimport PropTypes from \"prop-types\"\n\nimport Link from \"gatsby-link\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nimport { TagBreadcrumb } from './Tags';\nimport slugify from '#components/slugify';\n\nconst PostWrapper = styled.article`\n  overflow: auto;\n  margin-bottom: 70px;\n  /* margin-top: 100px; */\n  padding: 30px 30px;\n  border-top: 5px solid ${p => p.theme.dark ? p.theme.accentColor : p.theme.primaryColor};\n  border-radius: 10px;\n  box-shadow: ${p => p.theme.shadowSmall}; \n  background-color: ${p => p.theme.secondaryColor};\n\n  &:hover {\n    box-shadow: 0 5px 10px rgba(0,0,0,0.1);\n  }\n\n  span {\n    font-size: 13px;\n    color: gray;\n  }\n`\n\nexport const BlogDateAndReadTime = ({ date, readtime }) => (\n  <span style={{ fontSize: 13, color: \"gray\" }}>\n    <span aria-label={`publish date ${date}`}><FontAwesomeIcon color=\"gray\" icon=\"calendar-alt\" />&nbsp;&nbsp;{date}</span>\n    &nbsp;&nbsp;&nbsp;\n    <span aria-label={`${readtime} minutes read`}>\n      <FontAwesomeIcon color=\"gray\" icon=\"clock\" />&nbsp;&nbsp;{readtime}min read\n    </span>\n  </span>\n)\n\nconst BlogCard = ({ date, readtime, title, excerpt, slug, tags }) => {\n  return (\n    <Link to={slug} aria-label={`${title} - read time ${readtime} minutes`}>\n      <PostWrapper>\n        <BlogDateAndReadTime date={date} readtime={readtime} />\n\n        <h2>{title}</h2>\n        <p>{excerpt}</p>\n\n        <div style={{ marginTop: 20 }}>\n          {tags.map(tag => (\n            <TagBreadcrumb key={tag} aria-label={`${tag} tag`} to={`/blog/tags/${slugify(tag)}/`}>\n              {tag}\n            </TagBreadcrumb>\n          ))}\n        </div>\n      </PostWrapper>\n    </Link>\n  );\n}\n\n\nBlogDateAndReadTime.propTypes = {\n  date: PropTypes.string.isRequired,\n  readtime: PropTypes.number.isRequired\n}\n\nBlogCard.propTypes = {\n  date: PropTypes.string.isRequired,\n  readtime: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n  tags: PropTypes.array.isRequired,\n}\nexport default BlogCard;\n","import React from \"react\";\nimport styled from 'styled-components';\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\nimport slugify from '#components/slugify'\n\nexport const useTags = () => {\n  const tags = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(limit: 2000) {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  return tags;\n}\n\nexport const TagBreadcrumb = styled(Link)`\n  float: left;\n  border: 1px solid ${p => p.theme.dark ? p.theme.primaryColor : '#d9e0ff'};\n  border-radius: 50px;\n  padding: 8px 13px;\n  line-height: 10px;\n  margin: 5px;\n  font-size: 12px;\n\n  &:hover {\n    background: ${p => p.theme.dark ? p.theme.primaryColor : '#d9e0ff'};\n    color: ${p => p.theme.dark ? '#d9e0ff' : '#6D83F2'};\n  }\n`\n\nconst Tags = () => {\n  const tags = useTags();\n\n  return (\n    <section style={{ overflow: 'auto' }}>\n      {tags.allMarkdownRemark.group.map(tag => (\n        <TagBreadcrumb\n          key={tag.fieldValue}\n          to={`/blog/tags/${slugify(tag.fieldValue)}/`}\n          aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\n        >\n          {tag.fieldValue}, {tag.totalCount}\n        </TagBreadcrumb>\n      ))}\n    </section>\n  );\n}\n\nexport default Tags","import { useStaticQuery, graphql } from 'gatsby';\n\nexport const randomGenerator = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nconst useRandomBlogPost = () => {\n  const blogposts = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(filter: {fields: {posttype: {eq: \"blog\"}}}){\n          edges {\n            node {\n              frontmatter {\n                title\n              }\n              fields {\n                slug\n              }\n            }\n          }\n          totalCount\n        }\n      }\n    `\n  )\n\n  let randomPost = blogposts.allMarkdownRemark.edges[\n    randomGenerator(\n      0,\n      blogposts.allMarkdownRemark.totalCount - 1\n    )\n  ];\n\n  // make sure we don't have redundant randomPost \n  if (typeof window !== 'undefined') {\n    while (randomPost.node.fields.slug === window.location.pathname) {\n      randomPost = blogposts.allMarkdownRemark.edges[\n        randomGenerator(\n          0,\n          blogposts.allMarkdownRemark.totalCount - 1\n        )\n      ];\n      // don't wanna run it second time \n      break;\n    }\n  }\n\n  return { randomSlug: randomPost.node.fields.slug, randomTitle: randomPost.node.frontmatter.title };\n}\nexport default useRandomBlogPost;\n","import React from \"react\";\n\nimport PropTypes from 'prop-types';\nimport Link from 'gatsby-link';\n\nimport Tags from '#components/Blog/Tags';\nimport SplitLayout from \"#common/SplitLayout\";\nimport useRandomBlogPost from \"#src/hooks/useRandomBlogPost\";\n\n\nconst BlogLayout = ({ children, sharerSection }) => {\n  const { randomSlug, randomTitle } = useRandomBlogPost();\n\n  return (\n    <SplitLayout\n      content={children}\n      aside={\n        <>\n          <section>\n            <h4>Random post</h4>\n            <Link\n              style={{ fontSize: '16px' }}\n              to={randomSlug}\n            >\n              {randomTitle}\n            </Link>\n            <br /><br />\n          </section>\n          <section>\n            <h4>Tags</h4>\n            <Tags />\n            <br />\n          </section>\n          {sharerSection && sharerSection}\n        </>\n      }\n    />\n  )\n}\n\n\nBlogLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  sharerSection: PropTypes.node\n}\n\nexport default BlogLayout\n"],"sourceRoot":""}